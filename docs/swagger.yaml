basePath: /
definitions:
  controller.ErrorResponse:
    properties:
      code:
        type: integer
      errors:
        additionalProperties:
          type: string
        type: object
    type: object
  controller.MessageResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  controller.TokenResponse:
    properties:
      code:
        type: integer
      token:
        type: string
    type: object
  models.Person:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      person:
        $ref: '#/definitions/models.Person'
        type: object
      phone:
        type: string
    required:
    - email
    - password
    type: object
info:
  contact:
    email: admin@seinayn.io
    name: API Support
    url: http://www.swagger.io/support
  description: DDD This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger TEST Example API
  version: "5.0"
paths:
  /login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: do ping
      parameters:
      - description: username
        in: formData
        name: username
        type: string
      - description: password
        in: formData
        name: password
        type: string
      produces:
      - application/x-www-form-urlencoded
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad credentials
          schema:
            type: string
      summary: Login
      tags:
      - Security
  /register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Register User
      parameters:
      - description: username
        in: formData
        name: username
        type: string
      - description: password
        in: formData
        name: password
        type: string
      produces:
      - application/x-www-form-urlencoded
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: user exists
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Register
      tags:
      - Security
  /restore:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: do ping
      parameters:
      - description: username
        in: formData
        name: username
        type: string
      produces:
      - application/x-www-form-urlencoded
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad credentials
          schema:
            type: string
        "404":
          description: Not fount
          schema:
            type: string
      summary: Restore
      tags:
      - Security
  /user:
    get:
      consumes:
      - application/json
      description: User
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: bad request
          schema:
            type: string
        "401":
          description: error
          schema:
            type: string
        "404":
          description: Not fount
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get
      tags:
      - Security
    put:
      consumes:
      - application/json
      description: do ping
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Add account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Update User
      tags:
      - Security
  /userpass:
    put:
      consumes:
      - application/json
      description: do ping
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Add account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Update User Pass
      tags:
      - Security
  /users:
    get:
      consumes:
      - application/json
      description: User Lst
      parameters:
      - description: name search by email
        format: email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - bearerAuth: []
      summary: User List
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: do ping
      parameters:
      - description: Add account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Create
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: User
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not fount
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Delete
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: User
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: bad request
          schema:
            type: string
        "401":
          description: error
          schema:
            type: string
        "404":
          description: Not fount
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: do ping
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Add account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Update
      tags:
      - Users
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
